{
	"info": {
		"_postman_id": "850f5132-f877-4545-91c3-92a5e38af988",
		"name": "M1-IW - api_node",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13663573"
	},
	"item": [
		{
			"name": "Auth - Signing - Wrong Username",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"Kbaaa\",\r\n    \"password\": \"test123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/auth/signin",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"auth",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth - Signing - Wrong Password Copy",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"Kba\",\r\n    \"password\": \"test13\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/auth/signin",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"auth",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth - Signin - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"})",
							"",
							"pm.test('Response has the required fields', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"})",
							"",
							"pm.test('The message is a non-empty string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, 'Value should not be empty');",
							"})",
							"",
							"pm.test('Validate the format of the response', function () {",
							"    pm.response.to.have.status(200);",
							"    pm.response.to.be.json;",
							"    pm.response.to.have.jsonBody('message');",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\": \"Kba\",\r\n    \"password\": \"test123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/auth/signin",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"auth",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "Protected - Add amount on protected route - Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Response has the required fields', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.message).to.exist;",
							"})",
							"",
							"pm.test('Message is a non-empty string', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string').and.to.not.be.empty;",
							"})",
							"",
							"pm.test('Response time is less than 200ms', function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"amount\": 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/groups/additional-amount/:groupName",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"groups",
						"additional-amount",
						":groupName"
					],
					"variable": [
						{
							"key": "groupName",
							"value": "Mayans"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Protected - Add amount on protected route - Failed",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Response status code is 200', function () {",
							"    pm.response.to.have.status(200);",
							"})",
							"",
							"pm.test('Response message is not empty', function () {",
							"    const responseData = pm.response.json();",
							"    pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
							"})",
							"",
							"pm.test('Verify the request method is PUT', function () {",
							"    pm.expect(pm.request.method).to.equal('PUT');",
							"})",
							"",
							"pm.test('Response time is less than 200ms', function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(200);",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"amount\": 10\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:3000/groups/additional-amount/:groupName",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"groups",
						"additional-amount",
						":groupName"
					],
					"variable": [
						{
							"key": "groupName",
							"value": "Mayans"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Auth - Signout ",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required field - message\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Response does not contain sensitive information\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist;",
							"  pm.expect(responseData).to.not.have.property('password');",
							"  pm.expect(responseData).to.not.have.property('token');",
							"  pm.expect(responseData).to.not.have.property('accessToken');",
							"  pm.expect(responseData).to.not.have.property('refreshToken');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:3000/auth/signout",
					"host": [
						"localhost"
					],
					"port": "3000",
					"path": [
						"auth",
						"signout"
					]
				}
			},
			"response": []
		}
	]
}